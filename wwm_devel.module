<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;

define('WWM_DEVEL_MC_DUMMY_KEY', 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx');

/**
 * Implements hook_form_FORM_ID_alter().
 */
function wwm_devel_form_system_site_maintenance_mode_alter(&$form, FormStateInterface $form_state, $form_id) {
  $config = \Drupal::service('config.factory')->get('wwm_devel.settings');
  $permissions = \Drupal::service('user.permissions')->getPermissions();
  $permission_label = $permissions['access site in maintenance mode']['title'];

  $form['wwm_devel'] = [
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#title' => t('WWM Devel Settings'),
  ];
  $form['wwm_devel']['wwm_devel_maintenance_mode'] = [
    '#type' => 'checkbox',
    '#title' => t('Put site into maintenance mode'),
    '#default_value' => $config->get('maintenance_mode'),
    '#description' => t('Visitors will only see the maintenance mode message. Only users with the "@permission-label" <a href=":permissions-url">permission</a> will be able to access the site. Authorized users can log in directly via the <a href=":user-login">user login</a> page.', ['@permission-label' => $permission_label, ':permissions-url' => Url::fromRoute('user.admin_permissions')->toString(), ':user-login' => Url::fromRoute('user.login')->toString()]),
  ];

  if (\Drupal::moduleHandler()->moduleExists('mailchimp')) {

    $mailchimp_key = \Drupal::service('config.factory')->get('mailchimp.settings')->get('api_key');
    $form['wwm_devel']['mailchimp_api_setting'] = array(
      '#title' => t('MailChimp API Key'),
      '#type' => 'radios',
      '#options' => array(
        'default' => t('Default'),
        'clear' => t('Clear it'),
        'dummy' => t('Set dummy key'),
      ),
    );
    if (empty($mailchimp_key)) {
      $form['wwm_devel']['mailchimp_api_setting']['#default_value'] = 'clear';
      $form['wwm_devel']['mailchimp_api_setting']['#options']['default'] .= ' (restore the original key)';
    }
    else if ($mailchimp_key == WWM_DEVEL_MC_DUMMY_KEY) {
      $form['wwm_devel']['mailchimp_api_setting']['#default_value'] = 'dummy';
      $form['wwm_devel']['mailchimp_api_setting']['#options']['default'] .= ' (restore the original key)';
    }
    else {
      $form['wwm_devel']['mailchimp_api_setting']['#default_value'] = 'default';
      $form['wwm_devel']['mailchimp_api_setting']['#options']['default'] .= ' (leave as it is)';
    }

  }

  if (\Drupal::moduleHandler()->moduleExists('reroute_email')) {
    $reroute_config = \Drupal::service('config.factory')->get('reroute_email.settings');
    $form['wwm_devel'][\Drupal\reroute_email\Constants\RerouteEmailConstants::REROUTE_EMAIL_ENABLE] = [
      '#type' => 'checkbox',
      '#title' => t('Enable rerouting'),
      '#default_value' => $reroute_config->get(\Drupal\reroute_email\Constants\RerouteEmailConstants::REROUTE_EMAIL_ENABLE),
      '#description' => t('Check this box if you want to enable email rerouting. Uncheck to disable rerouting.'),
      '#config' => [
        'key' => 'reroute_email.settings:' . \Drupal\reroute_email\Constants\RerouteEmailConstants::REROUTE_EMAIL_ENABLE,
      ],
    ];

    $states = [
      'visible' => [':input[name=' . \Drupal\reroute_email\Constants\RerouteEmailConstants::REROUTE_EMAIL_ENABLE . ']' => ['checked' => TRUE]],
    ];

    $default_address = $reroute_config->get(\Drupal\reroute_email\Constants\RerouteEmailConstants::REROUTE_EMAIL_ADDRESS);
    if (NULL === $default_address) {
      $default_address = \Drupal::service('config.factory')->get('system.site')->get('mail');
    }

    $form['wwm_devel'][\Drupal\reroute_email\Constants\RerouteEmailConstants::REROUTE_EMAIL_ADDRESS] = [
      '#type' => 'textarea',
      '#rows' => 2,
      '#title' => t('Rerouting email addresses'),
      '#default_value' => $default_address,
      '#description' => t('Provide a comma-delimited list of email addresses. Every destination email address which is not fit with "Skip email rerouting for" lists will be rerouted to these addresses.<br/>If this field is empty and no value is provided, all outgoing emails would be aborted and the email would be recorded in the recent log entries (if enabled).'),
      '#element_validate' => [
        'validate_multiple_emails',
        'validate_multiple_unique',
      ],
      '#reroute_config_delimiter' => ',',
      '#pre_render' => ['Drupal\reroute_email\Form\SettingsForm::textareaRowsValue'],
      '#states' => $states,
      '#config' => [
        'key' => 'reroute_email.settings:' . \Drupal\reroute_email\Constants\RerouteEmailConstants::REROUTE_EMAIL_ADDRESS,
      ],
    ];
  }

  $form['#submit'][] = 'wwm_devel_system_site_maintenance_mode_submit';
}

/**
 * Copy of Drupal\reroute_email\Form\SettingsForm::validateMultipleEmails()
 */
function validate_multiple_emails(array $element, FormStateInterface $form_state): void {
  // Allow only valid email addresses.
  $addresses = reroute_email_split_string($form_state->getValue($element['#name']));
  foreach ($addresses as $address) {
    if (!\Drupal::service('email.validator')->isValid($address)) {
      $form_state->setErrorByName($element['#name'], t('@address is not a valid email address.', ['@address' => $address]));
    }
  }
}

/**
 * Copy of Drupal\reroute_email\Form\SettingsForm::validateMultipleUnique()
 */
function validate_multiple_unique(array $element, FormStateInterface $form_state): void {
  // String "email@example.com; ;; , ,," save just as "email@example.com".
  // This will be ignored if any validation errors occur.
  $form_state->setValue($element['#name'], implode($element['#reroute_config_delimiter'] ?? PHP_EOL, reroute_email_split_string($form_state->getValue($element['#name']))));
}

/**
 * Form submission handler for system_site_maintenance_mode form.
 */
function wwm_devel_system_site_maintenance_mode_submit($form, FormStateInterface $form_state) {
  $config = \Drupal::service('config.factory')->getEditable('wwm_devel.settings');
  $config->set('maintenance_mode', $form_state->getValue('wwm_devel_maintenance_mode'));

  if (\Drupal::moduleHandler()->moduleExists('mailchimp')) {
    $config->set('mailchimp_api_setting', $form_state->getValue('mailchimp_api_setting'));

    $mailchimp_config = \Drupal::service('config.factory')->getEditable('mailchimp.settings');
    $mailchimp_api_setting = $form_state->getValue('mailchimp_api_setting');
    if ($form['wwm_devel']['mailchimp_api_setting']['#default_value'] == 'default' && $mailchimp_api_setting != 'default') {
      // Backup original MailChimp key.
      $config->set('mailchimp_api_key', $mailchimp_config->get('api_key'));
    }
    else if ($form['wwm_devel']['mailchimp_api_setting']['#default_value'] != 'default' && $mailchimp_api_setting == 'default') {
      // Restore original MailChimp key.
      $mailchimp_config->set('api_key', $config->get('mailchimp_api_key'));
      \Drupal::messenger()->addStatus(t('Restored original MailChimp API Key.'));
    }

    if ($mailchimp_api_setting == 'clear')  {
      $mailchimp_config->set('api_key', '');
      \Drupal::messenger()->addStatus(t('MailChimp API Key has been cleared.'));
    }
    else if ($mailchimp_api_setting == 'dummy')  {
      $mailchimp_config->set('api_key', WWM_DEVEL_MC_DUMMY_KEY);
      \Drupal::messenger()->addStatus(t('MailChimp API Key has been set with the dummy value.'));
    }
    $mailchimp_config->save();
  }

  if (\Drupal::moduleHandler()->moduleExists('reroute_email')) {
    \Drupal::service('config.factory')->getEditable('reroute_email.settings')
      ->set(\Drupal\reroute_email\Constants\RerouteEmailConstants::REROUTE_EMAIL_ENABLE, $form_state->getValue(\Drupal\reroute_email\Constants\RerouteEmailConstants::REROUTE_EMAIL_ENABLE))
      ->set(\Drupal\reroute_email\Constants\RerouteEmailConstants::REROUTE_EMAIL_ADDRESS, $form_state->getValue(\Drupal\reroute_email\Constants\RerouteEmailConstants::REROUTE_EMAIL_ADDRESS))
      ->save();
  }

  $config->save();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function wwm_devel_form_mailchimp_admin_settings_alter(&$form, FormStateInterface $form_state, $form_id) {
  $config = \Drupal::service('config.factory')->get('wwm_devel.settings');
  $mailchimp_api_setting = $config->get('mailchimp_api_setting');
  if ($mailchimp_api_setting == 'clear' || $mailchimp_api_setting == 'dummy') {
    $form['api_key']['#attributes']['disabled'] = TRUE;
    $form['api_key']['#description'] .= t(' This has been disabled because it has been to clear or dummy by WWM Devel setting at <a href="@url">maintenance mode settings page.</a>', ['@url' => Url::fromRoute('system.site_maintenance_mode')->toString()]);
  }
}
